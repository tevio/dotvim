source ~/.vim/bundle.vim
source ~/.vim/config.py.vim
source ~/.vim/config.js.vim
source ~/.vim/deo.vm
source ~/.vim/mappings.vim
source ~/.vim/colours.vim


set pyxversion=3
" Filetypes
set nocompatible
syntax on
filetype on           " Enable filetype detection
filetype indent on    " Enable filetype-specific indenting
filetype plugin on    " Enable filetype-specific plugins

" Colours
set t_Co=256
set background=dark
" colorscheme  pyte
colorscheme  Tomorrow-Night
" colorscheme 256-grayvim

" Mappings
let mapleader = "\\"
set clipboard=unnamed


" Status line
set laststatus=2

" Backspace
set backspace=2

" Backup and Swap
set nobackup
set noswapfile

" Indentation rules
set autoindent
set smartindent
set softtabstop=2
set shiftwidth=2
set tabstop=4
set expandtab
set nosmarttab

" ui
set ruler
set noshowcmd
set nolazyredraw
set number
set nostartofline
if !&diff
  set cursorline
endif
set showmatch
set virtualedit=block
set hlsearch

"Session
let g:session_autoload = 'no'

" Auto commands
" autocmd BufWritePre * %s/\s\+$//e

" Formatting
" removed  'autoimport' fixer for python
"
" 'add_blank_lines_for_python_control_statements', 'black', 'isort', 'reorder-python-imports', 'yapf', 'remove_trailing_lines', 'trim_whitespace'
let g:vimrubocop_config = '.rubocop.yml'
let g:ale_fixers = {'python': [], 'ruby': ['rubocop'], 'javascript': ['prettier', 'eslint'], 'typescript': ['prettier', 'tslint'], 'vue': ['eslint']}
let g:ale_linter_aliases = {'vue': 'javascript'}
let g:ale_linters = {'vue': ['eslint'], 'python': ['pylint']}
" let g:ale_fixers = {'vue': ['eslint']}
" let g:ale_ruby_rubocop_executable = 'bin/rubocop'

" https://github.com/vim-syntastic/syntastic/issues/1484
"
" let g:syntastic_javascript_checkers = ['eslint']
" let g:syntastic_javascript_eslint_exe = 'eslint'
"
let g:syntastic_javascript_checkers = []

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_w = 1
let g:syntastic_check_on_wq = 0

set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

" Remap Escape to ;;
imap ;; <Esc>l

" Ctrl P Config
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git\|coverage'

" Ultisnip setup
let g:UltiSnipsExpandTrigger="<f5>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" let g:deoplete#enable_at_startup = 1

" :%s/\("[^"]+"\)/\1.freeze/gc
" Folding setup
"
set foldmethod=syntax
" set foldmethod=marker
" set foldmarker={,}

" Wildignore

" set wildignore += /node_modules/, dist/*, coverage/*

" Deoplete
" let g:deoplete#enable_at_startup = 1

augroup vimrc

  autocmd!

  autocmd FileType javascript let b:syntastic_checkers = findfile('.eslintrc', '.;') !=# '' ? ['eslint'] : []

  autocmd BufWritePre * %s/\s\+$//e

  autocmd BufWinEnter,Syntax * syn sync minlines=500 maxlines=500

  autocmd GUIEnter * set vb t_vb=

augroup END

set visualbell t_vb=
set noerrorbells

" Gutentags
let g:gutentags_ctags_exclude = [
    \ 'node_modules/*'
\]

" Rails
let g:rails_projections = {
      \  "app/lib/*.rb": {
      \      "test": [
      \        "spec/lib/{}_spec.rb"
      \      ]
      \  },
      \  "app/controllers/*_controller.rb": {
      \      "test": [
      \        "spec/requests/{}_spec.rb",
      \        "spec/controllers/{}_controller_spec.rb",
      \        "test/controllers/{}_controller_test.rb"
      \      ],
      \      "alternate": [
      \        "spec/requests/{}_spec.rb",
      \        "spec/controllers/{}_controller_spec.rb",
      \        "test/controllers/{}_controller_test.rb"
      \      ],
      \   },
      \   "spec/requests/*_spec.rb": {
      \      "command": "request",
      \      "alternate": "app/controllers/{}_controller.rb",
      \      "template": "require 'rails_helper'\n\n" .
      \        "RSpec.describe '{}' do\nend",
      \   },
      \ }
